trigger:
  branches:
    include:
      - '*'

pr:
  branches:
    include:
      - develop
pool:
  vmImage: 'ubuntu-latest'
variables:
  SNYK_AUTH: '45678901'
  SNYK_AUTH_TOKEN: $(SNYK_AUTH) # Securely store this in Azure DevOps pipeline variables
  variables:
  rbuildConfiguration: 'Release'
  pBuildConfiguration: '--prod'

stages:
# Stage 1: Build & UnitTest
- stage: BuildAndTest
  displayName: 'Build Test & SNYKSCAN'
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x' # Specify the Node.js version
        checkLatest: true
      displayName: 'Install Dependencies'
    - script: npm i sharp
      displayName: 'install image optimizer'
    - script: |
        npm config set fund false --location=global
        npm install 
        set cache .npm
        npm audit fix 
      displayName: 'Install Node.js'
    - script: npm install
      displayName: 'Run Unit Tests'
    - script: npm ci test
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        searchFolder: src/reports
        testResultsFiles: 'TEST-*.xml'
      displayName: 'Publish Test Results'

 
 # Step 2 integrate security scans into the CI/CD pipeline.
- stage: SnykScanforvulnerability
  displayName: 'SnykScan for vulnerability'
  jobs:
  - job:
    pool:
      vmImage: ubuntu-latest
  - job: SnykScan
    displayName: 'SnykScan'
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        npm config set fund false --location=global
        echo "Running Snyk security scan"
        npm install -g snyk 
      displayName: 'Run Snyk Scan'
    - script: |
        cat snyk-results.json
        severityCount=$(jq '.vulnerabilities | map(select(.severity=="high" or .severity=="critical")) | length' snyk-results.json)
        if [ "$severityCount" -gt 0 ]; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi
      displayName: 'Check for Critical Vulnerabilities'
  

# Testing Environment Deployment   
- stage: TestDeployment
  displayName: 'Test Environment Deployment'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy to Test Environment'
    environment: 'Test' # Define the environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Test Environment"
              # Add deployment scripts/commands here (e.g., ARM templates, Kubernetes manifests)
            displayName: 'Deploy Application'     
          - script: |
              echo "Running Integration Tests"
              # Command to run integration tests
            displayName: 'Run Integration Tests'
          - script: |
              echo "Running System Tests"
              # Command to run system tests
            displayName: 'Run System Tests'

          - script: |
              echo "Generating Test Results"
              # Generate and publish test reports (use tasks like PublishTestResults@2)
    
- stage: Staging
  displayName: 'Deploy to Staging'
  dependsOn: BuildAndTest
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment: 'staging'
    pool:
     vmImage: 'ubuntu-latest'
    strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: 'current'
                    artifactName: 'drop'

                - script: |
                    echo "Deploying to Staging..."
                    # Replace with actual deployment script
                  displayName: 'Deploy to Staging'

                - script: |
                    echo "Conduct UAT..."
                    # Replace with actual UAT commands if any
                  displayName: 'Conduct UAT'
              
                - script: |
                    echo "Collecting feedback and bug reports..."
                    # Replace with actual commands to collect feedback
                  displayName: 'Collect Feedback and Bugs'

- stage: SecurityScan
  displayName: 'Final Security Scanning'
  dependsOn: Staging
  condition: succeeded()
  jobs:
  - job: SnykScan
    displayName: 'Run Snyk Scan'
    pool:
     vmImage: 'ubuntu-latest'
    steps:
    - script: |
        npm config set fund false --location=global
        echo "Running Snyk security scan"
        npm install -g snyk 
      displayName: 'Run Snyk Scan'
  
   
      
  
  
- stage: Production
  displayName: 'Deploy to Production'
  dependsOn: SecurityScan
  condition: succeeded()
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
        deploy:
          steps: 
          - script: |
              echo "Deploying to Production..."
              # Replace with actual deployment script using CPanel
            displayName: 'Deploy to Production'
          - task: SendEmail@1
            inputs:
              to: 'awogao@gmail.com'
              subject: 'Production Deployment Status'
              body: 'Deployment to production was successful!'
            displayName: 'Send Success Notification'