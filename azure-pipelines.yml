trigger:
  branches:
    include:
      - '*'

pr:
  branches:
    include:
      - develop
pool:
  vmImage: 'ubuntu-latest'
variables:
  SNYK_AUTH: '45678901'
  SNYK_TOKEN: 'da364a31-6b96-412a-b516-c4d2bf4bc8fe'
  variables:
  rbuildConfiguration: 'Release'
  pBuildConfiguration: '--prod'
  CYBERPANEL_SERVER: '168.119.231.115:21'
  CYBERPANEL_USERNAME: 'KGFDevOpsAdmin_KGFDevOpsAdmin'
  CYBERPANEL_PASSWORD: kwe9qjItw%vbnlPO

stages:
# Stage 1: Build & UnitTest
- stage: BuildAndTest
  displayName: 'Build & UnitTest & SnykScan'
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x' # Specify the Node.js version
        checkLatest: true
      displayName: 'Install Dependencies'
    - script: npm i sharp
      displayName: 'install image optimizer'
    - script: |
        npm config set fund false --location=global
        set cache .npm
        npm audit fix 
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: '.'

    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: 'install --legacy-peer-deps'
        workingDir: '.'
      displayName: 'npm install with custom'
      
    - task : Npm@1
      displayName: 'npm run build'
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand : 'run build'
  
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: |
            src/*
            public/*
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy project files'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'webapp'
        targetPath: '$(Build.ArtifactStagingDirectory)'        
    
    - script: |
          echo "Running Snyk security scan"
          npm install -g snyk
          snyk auth $(SNYK_TOKEN)
          snyk test --severity-threshold=high --json > snyk-results.json
      displayName: 'Run Snyk Scan'

    - script: |
        echo "Checking for Critical Vulnerabilities"
        cat snyk-results.json
        severityCount=$(jq '.vulnerabilities | map(select(.severity=="high" or .severity=="critical")) | length' snyk-results.json)
        if [ "$severityCount" -gt 0 ]; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi
      displayName: 'Check for Critical Vulnerabilities'
 
# Step 3: Approval to proceed to the testing environment
- stage: TestDeployment
  displayName: 'Test Environment Deployment'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy to Test Environment'
    environment: 'Test' # Define the environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Test Environment"
            displayName: 'Run Integration Tests'
          - script: |
              echo "Running Snyk security scan"
              npm install -g snyk
              snyk auth $(SNYK_TOKEN)
              snyk test --severity-threshold=high --json > snyk-results.json
            displayName: 'Run Snyk Scan'

          - script: |
                echo "Checking for Critical Vulnerabilities"
                cat snyk-results.json
                severityCount=$(jq '.vulnerabilities | map(select(.severity=="high" or .severity=="critical")) | length' snyk-results.json)
                if [ "$severityCount" -gt 0 ]; then
                echo "Critical vulnerabilities found!"
                exit 1
                fi
            displayName: 'Check for Critical Vulnerabilities'

- stage: StageDeployment
  displayName: 'Stage Environment Deployment'
  dependsOn: TestDeployment
  condition: succeeded()
  jobs:
  - deployment: DeployToStage
    displayName: 'Deploy to Stage Environment'
    environment: 'Stage' # Define the environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Running Snyk security scan"
              npm install -g snyk
              snyk auth $(SNYK_TOKEN)
              snyk test --severity-threshold=high --json > snyk-results.json
            displayName: 'Run Snyk Scan'

          - script: |
                echo "Checking for Critical Vulnerabilities"
                cat snyk-results.json
                severityCount=$(jq '.vulnerabilities | map(select(.severity=="high" or .severity=="critical")) | length' snyk-results.json)
                if [ "$severityCount" -gt 0 ]; then
                echo "Critical vulnerabilities found!"
                exit 1
                fi
            displayName: 'Check for Critical Vulnerabilities'
          
          - task: FtpUpload@2
            inputs:
              credentialsOption: 'inputs'
              serverUrl: 'ftp://$(CYBERPANEL_SERVER)'
              username: '$(CYBERPANEL_USERNAME)'
              password: '$(CYBERPANEL_PASSWORD)'
              rootDirectory: '$(Pipeline.Workspace)/webapp/'
              remoteDirectory: '/public_html'
              trustSSL: true

- stage: ProductionDeployment
  displayName: 'Production Environment Deployment'
  dependsOn: StageDeployment
  condition: succeeded()
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    environment: 'Production' # Define the environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Production deployment"
          
          - task: FtpUpload@2
            inputs:
              credentialsOption: 'inputs'
              serverUrl: 'ftp://$(CYBERPANEL_SERVER)'
              username: '$(CYBERPANEL_USERNAME)'
              password: '$(CYBERPANEL_PASSWORD)'
              rootDirectory: '$(Pipeline.Workspace)/webapp/'
              remoteDirectory: '/public_html'
              trustSSL: true