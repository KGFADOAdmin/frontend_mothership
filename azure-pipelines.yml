<<<<<<< HEAD
trigger:
  branches:
    include:
      - develop

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        displayName: 'Build and Scan'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Step 1: Check out the code from the repository
          - task: Checkout@1
            displayName: 'Checkout Code'
            inputs:
              clean: true

          # Step 2: Run Snyk security scan
          - script: |
              npm install -g snyk
              snyk auth $(SNYK_TOKEN)
              snyk test
            displayName: 'Run Snyk Security Scan'
            env:
              SNYK_TOKEN: $(SNYK_TOKEN)

          # Step 3: Analyze Snyk scan results
          - task: Bash@3
            displayName: 'Check Snyk Results'
            inputs:
              targetType: 'inline'
              script: |
                snyk test --json > snyk-report.json
                if grep -q '"vulnerabilities": \[\]' snyk-report.json; then
                  echo "No vulnerabilities found."
                else
                  echo "Critical vulnerabilities found. Failing build."
                  exit 1
                fi

          # Step 4: Notify Scrum Master/Product Owner
          - task: SendEmail@1
            displayName: 'Notify Stakeholders'
            inputs:
              To: 'scrum.master@example.com;product.owner@example.com'
              Subject: 'Snyk Security Scan Results for $(Build.BuildId)'
              Body: |
                The Snyk security scan has been completed for build $(Build.BuildId).
                Please review the attached report for details.

  - stage: Approvals
    dependsOn: Build
    jobs:
      - job: ApprovalJob
        displayName: 'Approval Process'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Step 5: Approval to proceed to the testing environment
          - task: ManualValidation@0
            displayName: 'Approval to Proceed to Testing'
            inputs:
              instructions: 'Review the Snyk scan results and approve to proceed if there are no critical vulnerabilities.'
              approvers: |
                - scrum.master@example.com
                - product.owner@example.com
=======
# Trigger pipeline on any branch push
trigger:
  branches:
    include:
      - '*'
variables: 
  dotnetSdkVersion: '6.x'
  buildConfiguration: 'Release'
  releaseBranchName: 'release'
  
# Define pipeline
stages:
  - stage: 'InstallDependecies'
    displayName: 'Install dependencies the web application'
    jobs: 
    - job: 'install'
      displayName: 'Build job'
      pool:
       vmImage: 'ubuntu-20.04'
      steps:
      - task: NodeTool@0
        inputs:
         versionSpec: '20.13.0'  # Node version
        displayName: 'Install Node.js'
 

  # Build Stage
  - stage: 'Build'
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Compile Job'
        pool:
          vmImage: 'ubuntu-latest'
          demands:
          - npm 
      - job: SecurityScan
        dependsOn: Build
        condition: succeeded()
        pool:
         vmImage: ubuntu-latest
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
           version: '$(dotnetSdkVersion)'
      - job: Test
        dependsOn: SecurityScan  # Run tests after build completes
        condition: succeeded()  # Only run tests if build succeeds
        pool:
         vmImage: ubuntu-latest

  # Test Stage
  - stage: Test
    displayName: 'Unit Test Stage'
    dependsOn: Build
    jobs:
      - job: UnitTests
        displayName: 'Run Unit Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: dotnet restore
            displayName: 'Restore dependencies'

          - script: dotnet build --configuration Release --no-restore
            displayName: 'Build solution'

          - script: dotnet test --no-build --verbosity normal
            displayName: 'Run unit tests'
          

  # Packaging Stage
  - stage: Package
    displayName: 'Packaging Stage'
    dependsOn: Test
    jobs:
      - job: Package
        displayName: 'Package Job'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: CopyFiles@2
            inputs:
              contents: '**/bin/Release/**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Copy build artifacts'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish artifacts'
>>>>>>> features
