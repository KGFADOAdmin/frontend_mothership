trigger:
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  SNYK_AUTH_TOKEN: $(SNYK_AUTH_TOKEN) # Securely store this in Azure DevOps pipeline variables

stages:
- stage: BuildAndScan
  displayName: 'Build and Security Scan'
  jobs:
  - job: Build
    displayName: 'Build the project'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x' # Specify the Node.js version
        checkLatest: true

    - script: npm install
      displayName: 'Install Dependencies'
    
    - script: npm i sharp
      displayName: 'install image optimizer'

    - script: npm run build
      displayName: 'Build the Project'

  - job: SnykScan
    displayName: 'Snyk Security Scan'
    dependsOn: Build
    steps:
    - script: |
        echo "Running Snyk security scan"
        npm install -g snyk set fund false 
        snyk auth $SNYK_AUTH_TOKEN
        snyk test --severity-threshold=high --json > snyk-results.json
      displayName: 'Run Snyk Scan'

    - script: |
        echo "Checking for Critical Vulnerabilities"
        cat snyk-results.json
        severityCount=$(jq '.vulnerabilities | map(select(.severity=="high" or .severity=="critical")) | length' snyk-results.json)
        if [ "$severityCount" -gt 0 ]; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi
      displayName: 'Check for Critical Vulnerabilities'

- stage: TestDeployment
  displayName: 'Test Environment Deployment'
  dependsOn: BuildAndScan
  condition: succeeded()
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy to Test Environment'
    environment: 'Test' # Define the environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Test Environment"
              # Deployment script or command (e.g., Azure CLI, Kubernetes, etc.)
              # Example for a Node.js app deployment:
              # az webapp deployment source config-zip --resource-group <resource-group> --name <app-name> --src <path-to-zip>
            displayName: 'Deploy Application'
            
          - script: |
              echo "Running Integration Tests"
              npm run test:integration
            displayName: 'Run Integration Tests'

          - script: |
              echo "Running System Tests"
              npm run test:system
            displayName: 'Run System Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '**/test-results/*.xml'
              testResultsFormat: 'JUnit'
              failTaskOnFailedTests: true
            displayName: 'Publish Test Results'

